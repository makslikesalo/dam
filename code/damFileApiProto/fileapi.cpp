#include "fileapi.h"

// Записать значение value в файл с указанным путём и наименованием filePath
void fileApi_writeValueToFile(const char *filePath, uint32 value)
{

}



void fileApi_writeInitialData(FILE *f, DataBlock *d)
{
    // НАИМЕНОВАНИЕ
    // Процедура IB: Записать в файл начальный блок данных
    // ПРЕДУСЛОВИЯ
    // - Файл должен быть открыт на запись
    // - Файл должен быть пуст
    // - Наличие достаточного свободного места на диске
    // ПОСТУСЛОВИЯ
    // - Все данные успешно записаны в файл
    // ОШИБКИ
    // - Ошибка записи в файл


}


// Записать в открытый файл на запись значение позиции последнего блока данных
int fileApi_writePosition(FILE *f, uint32 pos)
{
    // НАИМЕНОВАНИЕ
    // Процедура WP: Записать в файл позицию
    // ПРЕДУСЛОВИЯ
    // - Файл должен быть открыт на запись
    // - Файл может быть пуст или не пуст
    // - Наличие достаточного свободного места на диске
    // ПОСТУСЛОВИЯ
    // - Позиция успешно записана в файл
    // ОШИБКИ
    // - Ошибка записи в файл
    // ПАРАМЕТРЫ
    // - Открытый файл на запись
    // - Значение позиции
    // ВОЗВРАЩАЕТ
    // - 1 - позиция успешно записана, 0 - ошибка
    // ДОПОЛНИТЕЛЬНО
    // - Позиция может принимать константу = НЕ определено

}


// Получить размер файла, байт
// Файл должен быть открыт на чтение
long fileApi_getFileSize(FILE *f)
{
    if (!f)
        return -1;

    // Установить позицию в конец файла
    if ( fseek(f, 0L, SEEK_END) )
        return -1;

    // Получить текущее значение позиции файла
    return ftell(f);
}


// Проверить, существует ли файл c указанным путём и наименованием filePath?
// Возвращает 1 - если существует, 0 - если не существует
int fileApi_isFileExists(const char *filePath)
{
    FILE *f = fopen(filePath, "r");
    if (f) {
        fclose(f);
        return 1;
    }
    return 0;
}
