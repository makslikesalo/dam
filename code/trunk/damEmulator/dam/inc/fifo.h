#ifndef FIFO
#define FIFO

#include "types.h"

// Процедуры для работы с буфером FIFO (не потокобезопасно)

// Структура буфера FIFO.
// Хранит в себе необходимые состояния и параметры.
typedef struct {
    char *buf;      // Массив для буфера
    uint32 bufSize;    // Размер массива buf, Байт

    // Переменные-состояния буфера FIFO
    uint32 head;     // Индекс головы, указывает на последний добавленный элемент
    uint32 tail;     // Индекс хвоста, указывает на первый добавленный элемент
    uint32 size;     // Текущий размер буфера

    // Из-за особенностей учёта хранимых данных, имеется нюанс:
    // Если head == tail И size == 0, то считается, что буфер пуст
    // Если head == tail И size == 1, то считается, что буфер не пуст
    // и он содержит один элемент, т.к. индекс головы и хвоста указывают
    // на единственный существующий элемент.
    // Во всех других случаях, в буфере содержится не одно значение.
} Fifo;

// Добавить значение в конец буфера FIFO.
// Перед вставкой следует проверить на заполненность fifoIsFull()
void fifoAppend(Fifo *fifo, uint32 v);

// Удалить первый добавленный элемент в буфере FIFO и вернуть его значение
uint32 fifoTakeFirst(Fifo *fifo);

// FIFO Буфер пуст?
// Возвращает 0 - не пуст, 1 - пуст
int fifoIsEmpty(Fifo *fifo);

// FIFO буфер полон?
// Возвращает 0 - не полон, 1 - полон
int fifoIsFull(Fifo *fifo);

#endif // FIFO

