Файл имеет следующий формат:
- Позиция (индекс) последнего записанного элемента данных
- Массив элементов данных

// Библиотека процедур
// Инструментальные процедуры
// Базовые инструментальные процедуры
- Получить размер файла, байт (Процедура SB)
- Файл существует (Процедура FE)
// Следующий уровень
- Записать массив данных (Процедура WDA)
// Следующий уровень
- Формат файла корректен (Процедура FC)
- Записать массив данных в файл (Процедура ADA)
- Прочитать массив данных из файла (Процедура RDA)


// НАИМЕНОВАНИЕ
// Процедура ADA: Записать массив данных в файл
// ПАРАМЕТРЫ
// - Путь и имя файла (может существовать, а может и нет)
// - Массив данных для записи
// - Кол-во элементов массива данных (может быть нулевым)
// - Максимальное количество элементов данных в файле
// ВОЗВРАЩАЕТ
// - 0 - массив данных успешно записан в файл, !0 - ошибка записи
// ПРЕДУСЛОВИЯ
// - Файл может существовать, а может и не существовать
// - Наличие достаточного свободного места на диске
// - Кол-во элементов массива данных должно быть БОЛЬШЕ ИЛИ РАВНО 0 И
//   МЕНЬШЕ ИЛИ РАВНО Максимального количество элементов данных в файле
// ПОСТУСЛОВИЯ
// - Данные успешно записаны в существующий или новый файл
// - Какая-либо ошибка
// ОШИБКИ
// - Ошибка работы с файлом
//   - Ошибка работы с существующим файлом
//      - Ошибка открытия файла
//      - Ошибка чтения файла
//   - Ошибка работы с новым файлом
//      - Ошибка создания файла
//      - Ошибка записи в файл
//   - Ошибка наличия свободного места на диске
// ДОПОЛНИТЕЛЬНО
// - Если файл не существует, то создаётся новый файл.
// - Если файл существует и он некорректен, то файл пересоздаётся.
// - Если формат существующего файла некорректен, то файл пересоздаётся.
// - 
Процедура ADA: Записать массив данных в файл
    ЕСЛИ Файл существует (Процедура FE)
    ТО 
        Открыть существующий файл на чтение и запись (r+ чтение с записью)
        ЕСЛИ Формат файла корректен (Процедура FC)
        ТО
            Записать массив данных (Процедура WDA)
        ИНАЧЕ
            Закрыть файл
            Пересоздать существующий файл
            Записать массив данных (Процедура WDA)
        Закрыть файл
    ИНАЧЕ 
        Создать новый файл на запись (w создать новый с записью)
        Записать массив данных (Процедура WDA)
        Закрыть файл

        
// НАИМЕНОВАНИЕ
// Процедура FC: Формат файла корректен
// ПРЕДУСЛОВИЯ
// - Файл должен быть открыт на чтение
// - Файл может быть пуст, а может и нет.
// ПОСТУСЛОВИЯ
// - Вывод: Формат файла корректен или нет
// ОШИБКИ
// - Ошибка чтения из файла
// ПАРАМЕТРЫ
// - Открытый файл на чтение
// - Макс. кол-во элементов данных в файле
// ВОЗВРАЩАЕТ
// - 1 - формат файла корректен, 0 - формат файла не корректен
Получить размер файла, байт (Процедура SB)
ЕСЛИ Размер файла = 0 Байт
ТО 
    Возвратить ЛОЖЬ
ИНАЧЕ ЕСЛИ Размер файла превышает допустимый размер [= Макс. кол-во элементов данных в файле * размер эл. данных + размер эл. позиции]
    Возвратить ЛОЖЬ
ИНАЧЕ ЕСЛИ Размер файла НЕ кратен размеру элементов данных с учётом размера элемента позиции
    Возвратить ЛОЖЬ
ИНАЧЕ ЕСЛИ Элемент позиции указывает на несуществующий элемент данных ИЛИ РАВЕН НЕ ОПРЕДЕЛЕНО
    Возвратить ЛОЖЬ
ИНАЧЕ
    Возвратить ИСТИНА   
    
        
                // !!!!!!!!!!!!!!!!!!!! Что делать, если кол-во данных равно 0? Что делать если данных больше чем макс. допустимо?
// НАИМЕНОВАНИЕ
// Процедура WDA: Записать массив данных
// ПРЕДУСЛОВИЯ
// - Файл должен быть открыт на запись и чтение
// - Наличие достаточного свободного места на диске
// - Данных может не быть, данные могут быть или данных может быть больше, чем допустимо макс. размером файла
// - Параметр макс. кол-во элементов данных в файле должен быть больше нуля
// - В файле как может существовать и не существовать элемент позиции
// ПОСТУСЛОВИЯ
// - Данные успешно записаны в файл (если они есть), позиция указывает на последний элемент данных.
// ОШИБКИ
// - Ошибка записи в файл
// ПАРАМЕТРЫ
// - Открытый файл на запись
// - Данные на запись
// - Макс. кол-во элементов данных в файле
// ВОЗВРАЩАЕТ
// - 0 - Данные успешно записаны, !0 - данные не записаны
// ДОПОЛНИТЕЛЬНО
// - Если данных нет, то в файл ничего не пишется
// - Если данных больше, чем допустимо макс. размером файла, то они будут писаться по кругу
// - По окончании работы, позиция указывает на последний элемент массива данных
// ПРИМЕЧАНИЕ
//     Возможные состояния файла:
//        - Файл пуст
//        - Файл не пуст
//            - Файл заполнен не до предела
//                - В файле есть только элемент позиции = НЕ ОПРЕДЕЛЕНО
//                - В файле есть позиция, и элементы данных
//            - Файл заполнен до предела
//    Возможные состояния позиции:
//        - Позиция = НЕ ОПРЕДЕЛЕНО
//        - Позиция указывает на элемент
ЕСЛИ файл пуст?
ТО 
   Записать элемент позиции = НЕ ОПРЕДЕЛЕНО
ИНАЧЕ
   Прочитать элемент позиции

ДЛЯ ВСЕХ элементов массива данных
    ЕСЛИ элемент позиции - есть НЕ ОПРЕДЕЛЕНО
        Элемент позиции = первый существующий или не существующий элемент данных в файле
    ИНАЧЕ
        ЕСЛИ Элемент позиции - есть последний элемент в файле
        ТО
            ЕСЛИ Добавлять элементы в файл ещё можно
            ТО
                Элемент позиции - есть последний ещё несуществующий элемент в файле
            ИНАЧЕ
                Элемент позиции - есть первый по счёту элемент в файле
        ИНАЧЕ [Элемент позиции указывает на непоследний элемент в файле]
            Элемент позиции - есть следующий по счёту элемент в файле

    ЕСЛИ Элемент позиции - есть существующий элемент данных в файле
    ТО 
        Переписать существующий элемент данных
    ИНАЧЕ [Элемент позиции - есть несуществующий последний элемент в файле]
        Добавить в конец файла элемент данных
Записать элемент позиции
    
  
// НАИМЕНОВАНИЕ
// Процедура RDA: Прочитать массив данных из файла
// ПАРАМЕТРЫ
// - Путь и имя файла
// - Пустой массив данных для записи прочитанных данных
// - Кол-во запрашиваемых элементов массива данных (может быть нулевым)
// ВОЗВРАЩАЕТ
// - Кол-во фактически прочитанных элементов данных. -1 - Ошибка
// ПРЕДУСЛОВИЯ
// - Файл должен существовать
// - Формат файла должен быть корректным
// - Кол-во запрашиваемых элементов должно быть больше или равно нулю
// - Массив, куда будут записываться прочитанные данные, должен быть инициализирован
//   на всю величину Кол-ва запрашиваемых элементов массива данных
// ПОСТУСЛОВИЯ
// - Прочитано столько элементов данных, сколько указано в соответствующем параметре
// - Та или иная ошибка
// ОШИБКИ
// - Ошибка работы с файлом
//   - Ошибка существования файла
//   - Ошибка работы с существующим файлом
//      - Ошибка открытия файла
//      - Ошибка чтения файла
// - Ошибка формата файла
ЕСЛИ Кол-во запрашиваемых элементов МЕНЬШЕ ИЛИ РАВНО 0
ТО Вернуть 0

ЕСЛИ Файл НЕ существует (Процедура FE)
ТО Вернуть -1

Открыть существующий файл только на чтение (r - чтение)

ЕСЛИ Файл НЕ открылся
ТО Вернуть -1

ЕСЛИ Формат файла корректен (Процедура FC)
ТО
    Прочитать из файл элемент позиции
    
    Индекс текущего элемента = Элемент позиции
    Прочитать из файла элемент под индексом текущего элемента
    Счётчик прочитанных элементов++
    Индекс текущего элемента--
    ЕСЛИ Индекс текущего элемента МЕНЬШЕ 0
    ТО Индекс текущего элемента = Индекс последнего элемента в файле
  
    ПОКА Счётчик прочитанных элементов МЕНЬШЕ Кол-ва запрашиваемых элементов И
        Индекс текущего элемента НЕ РАВНО элементу позиции [предотвратить чтение по второму кругу]
    ТО
        Прочитать из файла элемент под индексом текущего элемента
        Счётчик прочитанных элементов++
        Индекс текущего элемента--
        ЕСЛИ Индекс текущего элемента МЕНЬШЕ 0
        ТО Индекс текущего элемента = Индекс последнего элемента в файле
    
    Закрыть файл
    Вернуть значение Счётчика прочитанных элементов 

Закрыть файл
Вернуть -1