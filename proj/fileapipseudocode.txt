Псевдокод высокоуровневых процедур работы с файлом.

Файл имеет следующий двочиный формат:
- Позиция (индекс) последнего записанного элемента данных (4 байт)
- Массив элементов данных (N элементов * 4 байт)

// Библиотека процедур
// Инструментальные процедуры
// Базовые инструментальные процедуры
- Получить размер файла, байт (Процедура SB)
- Файл существует (Процедура FE)
// Следующий уровень
- Записать массив данных (Процедура WDA)
// Следующий уровень
- Формат файла корректен (Процедура FC)
- Записать массив данных в файл (Процедура ADA)
- Прочитать массив данных из файла (Процедура RDA)


// НАИМЕНОВАНИЕ
// Процедура ADA: Записать массив данных в файл
// ПАРАМЕТРЫ
// - Путь и имя файла (может существовать, а может и нет)
// - Массив данных для записи
// - Кол-во элементов массива данных (может быть нулевым)
// - Максимальное количество элементов данных в файле
// ВОЗВРАЩАЕТ
// - 0 - массив данных успешно записан в файл, !0 - ошибка записи
// ПРЕДУСЛОВИЯ
// - Файл может существовать, а может и не существовать
// - Наличие достаточного свободного места на диске
// - Кол-во элементов массива данных должно быть БОЛЬШЕ ИЛИ РАВНО 0
// ПОСТУСЛОВИЯ
// - Данные успешно записаны в существующий или новый файл
// - Какая-либо ошибка
// ОШИБКИ
// - Ошибка работы с файлом
//   - Ошибка работы с существующим файлом
//      - Ошибка открытия файла
//      - Ошибка чтения файла
//   - Ошибка работы с новым файлом
//      - Ошибка создания файла
//      - Ошибка записи в файл
//   - Ошибка наличия свободного места на диске
// ДОПОЛНИТЕЛЬНО
// - Если файл не существует, то создаётся новый файл.
// - Если файл существует и он некорректен, то файл пересоздаётся.
// - Если формат существующего файла некорректен, то файл пересоздаётся.
Процедура ADA: Записать массив данных в файл
    ЕСЛИ Файл существует (Процедура FE)
    ТО 
        Открыть существующий файл на чтение и запись (r+ чтение с записью)
        ЕСЛИ Формат файла корректен (Процедура FC)
        ТО
            Записать массив данных (Процедура WDA)
        ИНАЧЕ
            Переоткрыть файл на запись и чтение (w+ создать пустой с записью и чтением)
            Записать массив данных (Процедура WDA)
        Закрыть файл
    ИНАЧЕ 
        Создать новый файл на запись (w создать новый с записью)
        Записать массив данных (Процедура WDA)
        Закрыть файл

        
// НАИМЕНОВАНИЕ
// Процедура FC: Формат файла корректен
// ПАРАМЕТРЫ
// - Открытый файл на чтение
// - Макс. кол-во элементов данных в файле
// ВОЗВРАЩАЕТ
// - 1 - формат файла корректен, 0 - формат файла не корректен
// ПРЕДУСЛОВИЯ
// - Файл должен быть открыт на чтение
// - Файл может быть пуст, а может и нет.
// ПОСТУСЛОВИЯ
// - Вывод: Формат файла корректен или нет
// ОШИБКИ
// - Ошибка чтения файла
// ДОПОЛНИТЕЛЬНО
// - Максимальный размер файла определяется по формуле:
// Макс. кол-во элементов данных в файле * размер эл. данных + размер эл.позиции
// - Если в файле есть какие-либо данные, и размер этих данных 
// не превышает размера элемента позиции + 1 Байт, 
// то формат файла считается некорректным.
ЕСЛИ Файл пуст
ТО 
    Возвратить ЛОЖЬ
ИНАЧЕ ЕСЛИ Размер файла МЕНЬШЕ или РАВЕН размеру элемента позиции
    Возвратить ЛОЖЬ
ИНАЧЕ ЕСЛИ Размер файла НЕ кратен размеру элементов данных с учётом размера элемента позиции
    Возвратить ЛОЖЬ
ИНАЧЕ ЕСЛИ Размер файла превышает максимальный размер
    Возвратить ЛОЖЬ
ИНАЧЕ ЕСЛИ Элемент позиции указывает на несуществующий элемент данных
    Возвратить ЛОЖЬ
ИНАЧЕ
    Возвратить ИСТИНА   
    
        
// НАИМЕНОВАНИЕ
// Процедура WDA: Записать массив данных
// ПАРАМЕТРЫ
// - Открытый файл на запись
// - Данные на запись
// - Кол-во элементов массива данных (может быть нулевым)
// - Макс. кол-во элементов данных в файле
// ВОЗВРАЩАЕТ
// - 0 - Данные успешно записаны, !0 – ошибка записи данных
// ПРЕДУСЛОВИЯ
// - Файл должен быть открыт на запись и чтение
// - Формат файла должен быть корректен
// - Наличие достаточного свободного места на диске
// - Данных может не быть, данные могут быть или данных может быть больше, чем допустимо макс. размером файла
// - Параметр макс. кол-во элементов данных в файле должен быть больше нуля
// - В файле как может существовать и не существовать элемент позиции
// ПОСТУСЛОВИЯ
// - Данные успешно записаны в файл (если они есть), позиция указывает на последний элемент данных.
// ОШИБКИ
// - Ошибка записи в файл
// ДОПОЛНИТЕЛЬНО
// - Если данных для записи нет, то в файл ничего не пишется
// - Если данных больше, чем допустимо макс. размером файла, то они будут писаться по кругу
// - По окончании работы, элемент позиции в файле указывает на последний элемент массива данных
// - Если файл был пуст, и не было данных для записи, то в созданном файле 
// только значение позиции = 0
// ПРИМЕЧАНИЕ
//     Возможные состояния файла:
//        - Файл пуст
//        - Файл не пуст
//            - Файл заполнен не до предела
//                - В файле есть только элемент позиции = НЕ ОПРЕДЕЛЕНО
//                - В файле есть позиция, и элементы данных
//            - Файл заполнен до предела
ЕСЛИ файл пуст?
ТО 
   Записать в файл элемент позиции, значение у которого равно 0
   (первый по счёту ещё не существующий элемент данных)
ИНАЧЕ
   Прочитать элемент позиции

ДЛЯ ВСЕХ элементов массива данных
   ЕСЛИ имеются записанные элементы данных в файл
   ТО
    	ЕСЛИ Элемент позиции – указывает на последний элемент в файле
    	ТО
          ЕСЛИ Добавлять элементы в файл ещё можно
          ТО
              Элемент позиции - есть последний ещё несуществующий элемент в файле
          ИНАЧЕ
      	   Элемент позиции - есть первый по счёту элемент в файле
    	ИНАЧЕ [Элемент позиции указывает на не последний элемент в файле]
          Элемент позиции - есть следующий по счёту элемент в файле

    ЕСЛИ Элемент позиции - есть существующий элемент данных в файле
    ТО 
        Переписать существующий элемент данных
    ИНАЧЕ [Элемент позиции - есть несуществующий последний элемент в файле]
        Добавить в конец файла элемент данных
Записать элемент позиции
    
  
// НАИМЕНОВАНИЕ
// Процедура RDA: Прочитать массив данных из файла
// ПАРАМЕТРЫ
// - Путь и имя файла
// - Инициализированный массив для записи прочитанных данных
// - Кол-во запрашиваемых элементов массива данных (может быть нулевым)
// - Возвращаемое значение кол-ва фактически прочитанных элементов данных
// - Смещение от последнего записанного элемента
// ВОЗВРАЩАЕТ
// - 0 - успешно, !0 - Ошибка
// ПРЕДУСЛОВИЯ
// - Файл должен существовать
// - Формат файла должен быть корректным
// - Кол-во запрашиваемых элементов должно быть больше или равно нулю
// - Массив, куда будут записываться прочитанные данные, должен быть инициализирован
//   на всю величину Кол-ва запрашиваемых элементов массива данных
// ПОСТУСЛОВИЯ
// - Прочитано столько элементов данных, сколько указано в соответствующем параметре
// - Та или иная ошибка
// ОШИБКИ
// - Ошибка работы с файлом
//   - Ошибка существования файла
//   - Ошибка работы с существующим файлом
//      - Ошибка открытия файла
//      - Ошибка чтения файла
// - Ошибка формата файла
ЕСЛИ Кол-во запрашиваемых элементов МЕНЬШЕ ИЛИ РАВНО 0
ТО Вернуть 0

ЕСЛИ Файл НЕ существует (Процедура FE)
ТО Вернуть -1

Открыть существующий файл только на чтение (r - чтение)

ЕСЛИ Формат файла не корректен (Процедура FC)
ТО
    Закрыть файл
    Вернуть -1

Индекс позиции текущего элемента = Элемент позиции из файла - 
                                   Смещение от последнего записанного элемента
Счётчик прочитанных элементов = 0
  
ДЕЛАТЬ
    Прочитать из файла элемент под индексом текущего элемента
    Счётчик прочитанных элементов++
    Индекс текущего элемента--
    ЕСЛИ Индекс текущего элемента МЕНЬШЕ 0
    ТО Индекс текущего элемента = Индекс последнего элемента в файле
ПОКА Счётчик прочитанных элементов МЕНЬШЕ Кол-ва запрашиваемых элементов И
    Позиция текущего элемента НЕ РАВНА исходной позиции [предотвратить чтение по второму кругу]
    
Закрыть файл
Вернуть значение Счётчика прочитанных элементов 

